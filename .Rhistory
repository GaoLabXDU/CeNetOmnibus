CeNetOmnibus <- function(maxRequestSize=1000,workpath=tempdir(),projectName=NULL,typeLimit=10,useEnsembl=T,...) {
library(parallel)
library(biomaRt)
library(shiny)
library(plyr)
library(ggplot2)
library(jsonlite)
library(shinydashboard)
library(shinyWidgets)
library(DT)
library(ggthemr)
library(tibble)
library(igraph)
library(scales)
library(rhandsontable)
library(PerformanceAnalytics)
library(linkcomm)
library(MCL)
library(visNetwork)
library(colourpicker)
library(ggplotify)
library(survival)
library(survminer)
library(ComplexHeatmap)
library(circlize)
library(formattable)
library(infotheo)
library(ProNet)
library(gprofiler2)
library(svglite)
library(R.oo)
library(patchwork)
maxRequestSize=maxRequestSize*1024^2
tmpdir<<-normalizePath(workpath)
projName<<-projectName
if(!is.null(projectName))
{
projName <<- gsub(pattern = " ",replacement = '_',x = projectName)
}
typeLimit <<- typeLimit
ggthemr('flat')
usedcolors=swatch()
options(shiny.maxRequestSize = maxRequestSize)
useE<<-useEnsembl
#suppressMessages(shiny::runApp(system.file("app", package = "CeNetOmnibus"),launch.browser=TRUE,...))
shiny::runApp("inst/app",launch.browser=TRUE,...)
}
setwd("C:/Users/william/Desktop/CeNetOmnibus")
CeNetOmnibus(useEnsembl = F)
undebug(mcl)
#' Run CeNetOmnibus App
#'
#' @param maxRequestSize Integer.The admitted file size for uploaded files. Unit MB. Default 1000MB.
#' @param workpath Character. The dictionary for temp files. Default is return value of tempdir()
#' @param projectName Character. The name of this analysis. Default is session token.
#' @param typeLimit Integer. The number of valid items. Default is 10.
#' @param useEnsembl Boolean. Determine if use Ensembl databasae. Default is T for connecting.
#' @param ... Other parameters passed to runApp()
#'
#' @return
#' @export
#'
#' @examples
#'    CeNetOmnibus()
CeNetOmnibus <- function(maxRequestSize=1000,workpath=tempdir(),projectName=NULL,typeLimit=10,useEnsembl=T,...) {
library(parallel)
library(biomaRt)
library(shiny)
library(plyr)
library(ggplot2)
library(jsonlite)
library(shinydashboard)
library(shinyWidgets)
library(DT)
library(ggthemr)
library(tibble)
library(igraph)
library(scales)
library(rhandsontable)
library(PerformanceAnalytics)
library(linkcomm)
library(MCL)
library(visNetwork)
library(colourpicker)
library(ggplotify)
library(survival)
library(survminer)
library(ComplexHeatmap)
library(circlize)
library(formattable)
library(infotheo)
library(ProNet)
library(gprofiler2)
library(svglite)
library(R.oo)
library(patchwork)
maxRequestSize=maxRequestSize*1024^2
tmpdir<<-normalizePath(workpath)
projName<<-projectName
if(!is.null(projectName))
{
projName <<- gsub(pattern = " ",replacement = '_',x = projectName)
}
typeLimit <<- typeLimit
ggthemr('flat')
usedcolors=swatch()
options(shiny.maxRequestSize = maxRequestSize)
useE<<-useEnsembl
#suppressMessages(shiny::runApp(system.file("app", package = "CeNetOmnibus"),launch.browser=TRUE,...))
shiny::runApp("inst/app",launch.browser=TRUE,...)
}
setwd("C:/Users/william/Desktop/CeNetOmnibus")
CeNetOmnibus(useEnsembl = F)
community
undebug(mcl)
#' Run CeNetOmnibus App
#'
#' @param maxRequestSize Integer.The admitted file size for uploaded files. Unit MB. Default 1000MB.
#' @param workpath Character. The dictionary for temp files. Default is return value of tempdir()
#' @param projectName Character. The name of this analysis. Default is session token.
#' @param typeLimit Integer. The number of valid items. Default is 10.
#' @param useEnsembl Boolean. Determine if use Ensembl databasae. Default is T for connecting.
#' @param ... Other parameters passed to runApp()
#'
#' @return
#' @export
#'
#' @examples
#'    CeNetOmnibus()
CeNetOmnibus <- function(maxRequestSize=1000,workpath=tempdir(),projectName=NULL,typeLimit=10,useEnsembl=T,...) {
library(parallel)
library(biomaRt)
library(shiny)
library(plyr)
library(ggplot2)
library(jsonlite)
library(shinydashboard)
library(shinyWidgets)
library(DT)
library(ggthemr)
library(tibble)
library(igraph)
library(scales)
library(rhandsontable)
library(PerformanceAnalytics)
library(linkcomm)
library(MCL)
library(visNetwork)
library(colourpicker)
library(ggplotify)
library(survival)
library(survminer)
library(ComplexHeatmap)
library(circlize)
library(formattable)
library(infotheo)
library(ProNet)
library(gprofiler2)
library(svglite)
library(R.oo)
library(patchwork)
maxRequestSize=maxRequestSize*1024^2
tmpdir<<-normalizePath(workpath)
projName<<-projectName
if(!is.null(projectName))
{
projName <<- gsub(pattern = " ",replacement = '_',x = projectName)
}
typeLimit <<- typeLimit
ggthemr('flat')
usedcolors=swatch()
options(shiny.maxRequestSize = maxRequestSize)
useE<<-useEnsembl
#suppressMessages(shiny::runApp(system.file("app", package = "CeNetOmnibus"),launch.browser=TRUE,...))
shiny::runApp("inst/app",launch.browser=TRUE,...)
}
setwd("C:/Users/william/Desktop/CeNetOmnibus")
CeNetOmnibus(useEnsembl = F)
summary
summary$expansion=as.factor(summary$expansion)
summary$inflation=as.factor(summary$inflation)
detail$expansion=as.factor(detail$expansion)
detail$expansion=as.factor(detail$inflation)
p1=ggplot(data = summary)+
geom_bar(mapping = aes(x = expansion,y = modularity,fill=para),stat='identity')+
facet_wrap(~inflation,scales = 'free_y')+
scale_fill_manual(values = colorRampPalette(usedcolors)(length(allprogress)))+
basic_theme+labs(title="Modularity",x="Expansion")+
theme(legend.position ='none')
p
basic_theme=theme(legend.position = 'bottom',
axis.line = element_line(linetype = "solid"),
panel.grid.minor = element_line(linetype = "blank"),
axis.title = element_text(family = "serif",size=14,color='black'),
axis.text = element_text(family = "serif",size=14,color='black'),
axis.text.x = element_text(family = "serif"),
axis.text.y = element_text(family = "serif"),
plot.title = element_text(family = "serif", hjust = 0.5,size=18,color='black'),
legend.text = element_text(family = "serif",size=14,colour = 'black'),
legend.title = element_text(family = "serif",size=14,color='black'),
panel.background = element_rect(fill = NA),
plot.background = element_rect(colour = NA),
legend.key = element_rect(fill = NA),
legend.background = element_rect(fill = NA),
legend.direction = "horizontal")
summary$expansion=as.factor(summary$expansion)
summary$inflation=as.factor(summary$inflation)
detail$expansion=as.factor(detail$expansion)
detail$expansion=as.factor(detail$inflation)
p1=ggplot(data = summary)+
geom_bar(mapping = aes(x = expansion,y = modularity,fill=para),stat='identity')+
facet_wrap(~inflation,scales = 'free_y')+
scale_fill_manual(values = colorRampPalette(usedcolors)(length(allprogress)))+
basic_theme+labs(title="Modularity",x="Expansion")+
theme(legend.position ='none')
p1
p1=ggplot(data = summary)+
geom_bar(mapping = aes(x = expansion,y = modularity,fill=expansion),stat='identity')+
facet_wrap(~inflation,scales = 'free_y')+
scale_fill_manual(values = colorRampPalette(usedcolors)(allprogress))+
basic_theme+labs(title="Modularity",x="Expansion")+
theme(legend.position ='none')
p1
#' Run CeNetOmnibus App
#'
#' @param maxRequestSize Integer.The admitted file size for uploaded files. Unit MB. Default 1000MB.
#' @param workpath Character. The dictionary for temp files. Default is return value of tempdir()
#' @param projectName Character. The name of this analysis. Default is session token.
#' @param typeLimit Integer. The number of valid items. Default is 10.
#' @param useEnsembl Boolean. Determine if use Ensembl databasae. Default is T for connecting.
#' @param ... Other parameters passed to runApp()
#'
#' @return
#' @export
#'
#' @examples
#'    CeNetOmnibus()
CeNetOmnibus <- function(maxRequestSize=1000,workpath=tempdir(),projectName=NULL,typeLimit=10,useEnsembl=T,...) {
library(parallel)
library(biomaRt)
library(shiny)
library(plyr)
library(ggplot2)
library(jsonlite)
library(shinydashboard)
library(shinyWidgets)
library(DT)
library(ggthemr)
library(tibble)
library(igraph)
library(scales)
library(rhandsontable)
library(PerformanceAnalytics)
library(linkcomm)
library(MCL)
library(visNetwork)
library(colourpicker)
library(ggplotify)
library(survival)
library(survminer)
library(ComplexHeatmap)
library(circlize)
library(formattable)
library(infotheo)
library(ProNet)
library(gprofiler2)
library(svglite)
library(R.oo)
library(patchwork)
maxRequestSize=maxRequestSize*1024^2
tmpdir<<-normalizePath(workpath)
projName<<-projectName
if(!is.null(projectName))
{
projName <<- gsub(pattern = " ",replacement = '_',x = projectName)
}
typeLimit <<- typeLimit
ggthemr('flat')
usedcolors=swatch()
options(shiny.maxRequestSize = maxRequestSize)
useE<<-useEnsembl
#suppressMessages(shiny::runApp(system.file("app", package = "CeNetOmnibus"),launch.browser=TRUE,...))
shiny::runApp("inst/app",launch.browser=TRUE,...)
}
setwd("C:/Users/william/Desktop/CeNetOmnibus")
CeNetOmnibus(useEnsembl = F)
#' Run CeNetOmnibus App
#'
#' @param maxRequestSize Integer.The admitted file size for uploaded files. Unit MB. Default 1000MB.
#' @param workpath Character. The dictionary for temp files. Default is return value of tempdir()
#' @param projectName Character. The name of this analysis. Default is session token.
#' @param typeLimit Integer. The number of valid items. Default is 10.
#' @param useEnsembl Boolean. Determine if use Ensembl databasae. Default is T for connecting.
#' @param ... Other parameters passed to runApp()
#'
#' @return
#' @export
#'
#' @examples
#'    CeNetOmnibus()
CeNetOmnibus <- function(maxRequestSize=1000,workpath=tempdir(),projectName=NULL,typeLimit=10,useEnsembl=T,...) {
library(parallel)
library(biomaRt)
library(shiny)
library(plyr)
library(ggplot2)
library(jsonlite)
library(shinydashboard)
library(shinyWidgets)
library(DT)
library(ggthemr)
library(tibble)
library(igraph)
library(scales)
library(rhandsontable)
library(PerformanceAnalytics)
library(linkcomm)
library(MCL)
library(visNetwork)
library(colourpicker)
library(ggplotify)
library(survival)
library(survminer)
library(ComplexHeatmap)
library(circlize)
library(formattable)
library(infotheo)
library(ProNet)
library(gprofiler2)
library(svglite)
library(R.oo)
library(patchwork)
maxRequestSize=maxRequestSize*1024^2
tmpdir<<-normalizePath(workpath)
projName<<-projectName
if(!is.null(projectName))
{
projName <<- gsub(pattern = " ",replacement = '_',x = projectName)
}
typeLimit <<- typeLimit
ggthemr('flat')
usedcolors=swatch()
options(shiny.maxRequestSize = maxRequestSize)
useE<<-useEnsembl
#suppressMessages(shiny::runApp(system.file("app", package = "CeNetOmnibus"),launch.browser=TRUE,...))
shiny::runApp("inst/app",launch.browser=TRUE,...)
}
setwd("C:/Users/william/Desktop/CeNetOmnibus")
CeNetOmnibus(useEnsembl = F)
#' Run CeNetOmnibus App
#'
#' @param maxRequestSize Integer.The admitted file size for uploaded files. Unit MB. Default 1000MB.
#' @param workpath Character. The dictionary for temp files. Default is return value of tempdir()
#' @param projectName Character. The name of this analysis. Default is session token.
#' @param typeLimit Integer. The number of valid items. Default is 10.
#' @param useEnsembl Boolean. Determine if use Ensembl databasae. Default is T for connecting.
#' @param ... Other parameters passed to runApp()
#'
#' @return
#' @export
#'
#' @examples
#'    CeNetOmnibus()
CeNetOmnibus <- function(maxRequestSize=1000,workpath=tempdir(),projectName=NULL,typeLimit=10,useEnsembl=T,...) {
library(parallel)
library(biomaRt)
library(shiny)
library(plyr)
library(ggplot2)
library(jsonlite)
library(shinydashboard)
library(shinyWidgets)
library(DT)
library(ggthemr)
library(tibble)
library(igraph)
library(scales)
library(rhandsontable)
library(PerformanceAnalytics)
library(linkcomm)
library(MCL)
library(visNetwork)
library(colourpicker)
library(ggplotify)
library(survival)
library(survminer)
library(ComplexHeatmap)
library(circlize)
library(formattable)
library(infotheo)
library(ProNet)
library(gprofiler2)
library(svglite)
library(R.oo)
library(patchwork)
maxRequestSize=maxRequestSize*1024^2
tmpdir<<-normalizePath(workpath)
projName<<-projectName
if(!is.null(projectName))
{
projName <<- gsub(pattern = " ",replacement = '_',x = projectName)
}
typeLimit <<- typeLimit
ggthemr('flat')
usedcolors=swatch()
options(shiny.maxRequestSize = maxRequestSize)
useE<<-useEnsembl
#suppressMessages(shiny::runApp(system.file("app", package = "CeNetOmnibus"),launch.browser=TRUE,...))
shiny::runApp("inst/app",launch.browser=TRUE,...)
}
setwd("D:/GitHub/CeNetOmnibus/")
CeNetOmnibus(useEnsembl = F)
#' Check and Install the dependency packages of CeNetOmnibus
#' @return
#' @export
#'
#' @examples
#'    checkDependency()
checkDependency=function()
{
print("Checking Dependency...")
dependency=data.frame(package=c('parallel','biomaRt','shiny','plyr','ggplot2','jsonlite','shinydashboard','shinyWidgets','DT','ggthemr','tibble','igraph','scales','rhandsontable','PerformanceAnalytics','linkcomm','MCL','visNetwork','colourpicker','ggplotify','survival','survminer','ComplexHeatmap','circlize','formattable','infotheo','ProNet','gprofiler2','R.oo','svglite','patchwork'),
repo=c('CRAN','Bioc','CRAN','CRAN','CRAN','CRAN','CRAN','CRAN','CRAN','github','CRAN','CRAN','CRAN','CRAN','CRAN','CRAN','CRAN','CRAN','CRAN','CRAN','CRAN','CRAN','Bioc','CRAN','CRAN','CRAN','self','CRAN','CRAN','CRAN','CRAN'),stringsAsFactors = F)
rownames(dependency)=dependency$package
installed=installed.packages()
if(!"devtools" %in% installed)
install.packages('devtools')
if(!"BiocManager" %in% installed)
install.packages('BiocManager')
install=dependency[!(dependency$package %in% installed),]
CRAN=install$package[which(install$repo=='CRAN')]
Bioc=install$package[which(install$repo=='Bioc')]
if(length(CRAN)>0)
devtools::install_cran(CRAN,upgrade='never')
if(length(Bioc)>0)
devtools::install_bioc(Bioc,upgrade = 'never')
if("ggthemr" %in% install$package)
devtools::install_github("cttobin/ggthemr",upgrade='never')
if("ProNet" %in% install$package)
install.packages("https://cran.r-project.org/src/contrib/Archive/ProNet/ProNet_1.0.0.tar.gz",repos = NULL,type = "source")
print("Checking Dependency Finish!")
}
checkDependency()
checkDependency()
download.file('https://cran.r-project.org/src/contrib/Archive/ProNet/ProNet_1.0.0.tar.gz')
download.file(url = 'https://cran.r-project.org/src/contrib/Archive/ProNet/ProNet_1.0.0.tar.gz','ProNet.tar.g')
install.packages("C:/Users/DELL/Desktop/ProNet_1.0.0.tar.gz", repos = NULL, type = "source")
.libPaths("D:/Program Files (x86)/R-3.6.1/library/")
.libPaths()
#' Run CeNetOmnibus App
#'
#' @param maxRequestSize Integer.The admitted file size for uploaded files. Unit MB. Default 1000MB.
#' @param workpath Character. The dictionary for temp files. Default is return value of tempdir()
#' @param projectName Character. The name of this analysis. Default is session token.
#' @param typeLimit Integer. The number of valid items. Default is 10.
#' @param useEnsembl Boolean. Determine if use Ensembl databasae. Default is T for connecting.
#' @param ... Other parameters passed to runApp()
#'
#' @return
#' @export
#'
#' @examples
#'    CeNetOmnibus()
CeNetOmnibus <- function(maxRequestSize=1000,workpath=tempdir(),projectName=NULL,typeLimit=10,useEnsembl=T,...) {
library(parallel)
library(biomaRt)
library(shiny)
library(plyr)
library(ggplot2)
library(jsonlite)
library(shinydashboard)
library(shinyWidgets)
library(DT)
library(ggthemr)
library(tibble)
library(igraph)
library(scales)
library(rhandsontable)
library(PerformanceAnalytics)
library(linkcomm)
library(MCL)
library(visNetwork)
library(colourpicker)
library(ggplotify)
library(survival)
library(survminer)
library(ComplexHeatmap)
library(circlize)
library(formattable)
library(infotheo)
library(ProNet)
library(gprofiler2)
library(svglite)
library(R.oo)
library(patchwork)
maxRequestSize=maxRequestSize*1024^2
tmpdir<<-normalizePath(workpath)
projName<<-projectName
if(!is.null(projectName))
{
projName <<- gsub(pattern = " ",replacement = '_',x = projectName)
}
typeLimit <<- typeLimit
ggthemr('flat')
usedcolors=swatch()
options(shiny.maxRequestSize = maxRequestSize)
useE<<-useEnsembl
#suppressMessages(shiny::runApp(system.file("app", package = "CeNetOmnibus"),launch.browser=TRUE,...))
shiny::runApp("inst/app",launch.browser=TRUE,...)
}
setwd("D:/GitHub/CeNetOmnibus/")
CeNetOmnibus(useEnsembl = F)
